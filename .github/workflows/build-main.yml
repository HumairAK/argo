name: Build images for Main branch
on:
  workflow_dispatch:
    inputs:
      ARGO_WF_IMAGE_REPO:
        default: ds-pipelines-argo-workflowcontroller
        description: "Argo workflow controller image repo"
        required: true
      ARGO_EXEC_IMAGE_REPO:
        default: ds-pipelines-argo-argoexec
        description: "Argo exec imag repo"
        required: true
      QUAY_ORG:
        default: hukhan
        description: "Quary Org to push images to"
        required: true
      SOURCE_BRANCH:
        default: main
        description: "Source branch to build image from"
        required: true
      TAG:
        description: "Image Tag"
        required: true
  push:
    branches:
      - main
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true
env:
  ARGO_WF_IMAGE_REPO: ${{ inputs.ARGO_WF_IMAGE_REPO }}
  ARGO_EXEC_IMAGE_REPO: ${{ inputs.ARGO_EXEC_IMAGE_REPO }}
  QUAY_ORG: ${{ inputs.hukhan }}
  QUAY_ID: ${{ secrets.QUAY_USERNAME }}
  QUAY_TOKEN: ${{ secrets.QUAY_PASSWORD }}
  SOURCE_BRANCH: ${{ inputs.SOURCE_BRANCH }}
jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to Quay.io
        uses: redhat-actions/podman-login@v1
        with:
          username: ${{ secrets.RH_REGISTRY_ID }}
          password: ${{ secrets.RH_REGISTRY_TOKEN }}
          registry: registry.redhat.io
      - name: Generate Tag
        if: github.event_name == 'push'
        shell: bash
        id: tags
        run: |
          commit_sha=${{ github.event.after }}
          tag=main-${commit_sha:0:7}
          echo "tag=${tag}" >> $GITHUB_OUTPUT
      - name: Build and Tag Argo Workflow Controller Image
        uses: ./.github/actions/build_and_tag
        env:
          IMAGE_REPO: ${{ env.ARGO_WF_IMAGE_REPO }}
        with:
          TAG: ${{ steps.tags.outputs.tag || inputs.TAG }}
          TAG_LATEST: true
          DOCKERFILE: ./argo-workflowcontroller/Dockerfile.ODH
      - name: Build and Tag Argo Workflow Exec Image
        uses: ./.github/actions/build_and_tag
        env:
          IMAGE_REPO: ${{ env.ARGO_EXEC_IMAGE_REPO }}
        with:
          TAG: ${{ steps.tags.outputs.tag  || inputs.TAG}}
          TAG_LATEST: true
          DOCKERFILE: ./argo-argoexec/Dockerfile.ODH
